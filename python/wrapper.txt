`timescale 1ns / 1ps

//The following is a wrapper implementation built around the XILINX DSP MACRO which I am designing in order to learn about how to use the DSP MACRO to its full potential.
//The target algorithms to implement are FIR filter, DFT approx, Attenuate.
//This wrapper will be used in the NASK_WGWN project to compute filters and freq-domain information in order to attenuate white noise using a customizable filter. 
//The final implementation will use Xilinx FIR IP, but this project is a task in order to learn about how the Xilinx IP and similar IP operate.


module dsp48_macro_wrapper#(
    parameter DAT_BIT_WID = 16,     //width of sample
    parameter ADR_BIT_WID = 16,     //total width of local address space
    parameter INS_BIT_WID = 16,     //total width of instruction
    parameter ACC_BIT_WID = 32,     //width of internal registers/accumulators
    parameter WRI_LOC_WID = 4,      //number of bits in instruction used for determining where the bus writes to.
    parameter REA_LOC_WID = 4       //number of bits in instruction used for determining where the bus loads from.
    )(
    //regmem ctrl registers (one way, read only)
    input   [DAT_BIT_WID-1:0]   requested_settings_data,
    output  [ADR_BIT_WID-1:0]   requested_settings_addr,
    output                      requested_settings_ready,
    input                       requested_settings_valid,
    
    //instruction from bram (one way, read only)
    input   [INS_BIT_WID-1:0]   instruction_data,
    output  [ADR_BIT_WID-1:0]   instruction_addr,
    output                      instruction_ready,
    input                       instruction_valid,
    
    //input data from input firo (one way, read only)
    input   [DAT_BIT_WID-1:0]   sample_data,
    output  [ADR_BIT_WID-1:0]   sample_addr,
    output                      sample_ready,
    input                       sample_valid,
    
    //output data to output fifo (one way, write only)
    output  [DAT_BIT_WID-1:0]   calculated_data,
    output                      calculated_valid,
    input                       calculated_ready,
    
    //input data from ext bus (one way, read only)
    input   [DAT_BIT_WID-1:0]   inhale_data,
    input                       inhale_valid,
    output                      inhale_ready,
    
    //output data to ext bus (one way, write only)
    output [DAT_BIT_WID-1:0] exhale_data,
    output exhale_valid,
    input exhale_ready,
    
    input clk,
    input resetn
    );
    
reg     [ADR_BIT_WID-1:0]   program_counter;
reg     [ADR_BIT_WID-1:0]   sample_pointer;
reg     [ACC_BIT_WID-1:0]   dsp_block_reg_a;
reg     [ACC_BIT_WID-1:0]   dsp_block_reg_b;
reg     [ACC_BIT_WID-1:0]   dsp_block_reg_c;
reg     [ACC_BIT_WID-1:0]   dsp_block_reg_d;
reg     [ACC_BIT_WID-1:0]   alu_reg_e;
reg     [ACC_BIT_WID-1:0]   alu_reg_f;
reg     [ACC_BIT_WID-1:0]   alu_reg_g;
reg     [ACC_BIT_WID-1:0]   alu_reg_h;  
wire    [INS_BIT_WID-1:0]   instruction;



assign sample_addr = sample_pointer;
assign instruction_addr = program_counter;
assign instruction = instruction_data;



wire    [2**WRI_LOC_WID-1:0]   bus_write_enables;
wire    [2**REA_LOC_WID-1:0]   bus_load_enables;
genvar i;
generate
    for(i=0;i<16;i++)begin
        assign bus_write_enables[i] = (instruction[WRI_LOC_WID-1:0] == i);                  //decoder for destination
        assign bus_write_enables[i] = (instruction[REA_LOC_WID-1:WRI_LOC_WID] == i);        //decoder for source
    end
endgenerate


////MSB/////////////////////  INSTRUCTION  FORMAT  ////////////////////////LSB////
//                                                                              //
//          CNTX    ALUO    SOU3    SOU2    SOU1    SOU0    DESTIN        //
//                                                                              //
////MSB////////////////////////////////////////////////////////////////////LSB////

//  EXPLANATION:
//      CNTX - "context"    - differentiates instruction type. reserved for highest order individualism/instr format
//      ALU0 - "alu opcode" - describes the operation to be performed within the ALO. can be NO-OP when data passes through dsp48 instead
//      SOU3 - "source 3"   - MSB 4 bits of source address. Includes FIRO(indv), REGMAP(shared), Registers(indv) and EXT(shared) locations.
//      SOU2 - "source 2"   -     4 bits of source address. Includes FIRO(indv), REGMAP(shared), Registers(indv) and EXT(shared) locations.
//      SOU1 - "source 1"   -     4 bits of source address. Includes FIRO(indv), REGMAP(shared), Registers(indv) and EXT(shared) locations.
//      SOU0 - "source 0"   - LSB 4 bits of source address. Includes FIRO(indv), REGMAP(shared), Registers(indv) and EXT(shared) locations.
//      DES1 - "destin. 1"  - MSB 4 bits of destination address. Where the resultant computation is stored. Can be one of 256 internal locations. 
//      DES0 - "destin. 0"  - LSB 4 bits of destination address. Where the resultant computation is stored. Can be one of 256 internal locations. 



always @(posedge clk)begin
    if(resetn == 0)begin
        program_counter <= 0;
    end else begin
        program_counter <= program_counter + 1;
    end
end
    
    
    
endmodule

